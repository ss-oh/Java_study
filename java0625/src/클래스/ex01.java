package 클래스;

public class ex01 {

	public static void main(String[] args) {
//		클래스 - 객체지향 프로그래밍 204p.
//		
//		동일한 속성을 가진 여러개의 객체를 만들어서 사용하고 싶은 경우 클래스를 생성 [뼈대구축]
//		동일한 속성이란 -> 여러가지 변수들, 메서드
//		ex)xx학교의 학생관리 프로그램
//		학생들마다 동일한 속성이 있음 => 이름, 학년, 반 , 성별, 성적 등등
//		동일한 속성들을 하나하나 변수로 만들어서 사용하기에는 불편함 => 클래스로 뼈대를 구축
		
//		반복적인 코드들을 사용할 경우 => 메서드를 생성
//		메서드 생성 시 반환타입과 매개변수를 잘 체크해서 작업( 자료형도 잘 설정 )
//		반환타입 => 메서드를 호출한 곳으로 값을 보내줄 때 사용
//		매개변수 => 메서드를 호출한 곳에서 값을 메서드로 보내줄 때
		
//		반환타입, 매개변수 자료형은 뭐든 다 가능
		
		
//		자동차
//		모델명, 색상, 도어수, 무게 -> 필드
//		시동on,달린다,창문연다 -> 메서드
//
//		변수 => 값을 저장(1개만 저장)
//		배열 => 값을 저장(여러개 저장, 자료형은 동일해야함(int형 배열에 문자넣기 안됌))
//		클래스(객체) => 값을 저장, 다양한 기능들도 저장 ( 여러개 저장, 자료형도 다양하게 가능)
//		다양한 기능이란(자주 사용하는 코드를 저장)
		
//		클래스 => 어떤 값을 저장할거야, 어떤 기능들을 저장(정의-설계도)(int로 뭘 저장하고 double로 뭘저장하고)
//		사용 할 때 => 클래스에 정의된 내용을 기반으로 객체를 생성한다 ( 설계도를 통해 생성된 것 )
		
//		===A,B,C 자동차를 만들어서 각각 다름 값들로 세팅===
		
//		공통된 특성을 클래스에 정의
//		
//		class 자동차{        자동차 A = new 자동차();
//							자동차 B = new 자동차();
//							자동차 C = new 자동차();
//			
//			int 문짝수     
//			String 색상
//			String 모델명  
//			double 무게    
//			
//			달린다
//			후진한다
//			시동을 끄고 켠다
//			창문을 조작한다
//			
//		}
		
//		객체지향 프로그래밍의 특징
//		캡슐화
//		상속
//		다형성
//		추상화: 복잡한 내부는 숨기고 필요한 정보만 노출
		
		
//		클래스로 만들어진 객체 : 인스턴스
//		cat:객체 / cat 객체는 Animal의 인스턴스
		
		
		
	}

}
